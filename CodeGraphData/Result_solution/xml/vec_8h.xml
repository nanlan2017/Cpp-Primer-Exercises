<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.6">
  <compounddef id="vec_8h" kind="file">
    <compoundname>vec.h</compoundname>
    <includes local="no">memory</includes>
    <includedby refid="vec__main_8cpp" local="yes">C:/workspace/vs_wspace/Cpp Primer 5th exercises/16_template/vec_main.cpp</includedby>
    <incdepgraph>
      <node id="87">
        <label>C:/workspace/vs_wspace/Cpp Primer 5th exercises/16_template/vec.h</label>
        <link refid="vec.h"/>
        <childnode refid="88" relation="include">
        </childnode>
      </node>
      <node id="88">
        <label>memory</label>
      </node>
    </incdepgraph>
    <invincdepgraph>
      <node id="89">
        <label>C:/workspace/vs_wspace/Cpp Primer 5th exercises/16_template/vec.h</label>
        <link refid="vec.h"/>
        <childnode refid="90" relation="include">
        </childnode>
      </node>
      <node id="90">
        <label>C:/workspace/vs_wspace/Cpp Primer 5th exercises/16_template/vec_main.cpp</label>
        <link refid="vec__main_8cpp"/>
      </node>
    </invincdepgraph>
    <innerclass refid="class_vec" prot="public">Vec</innerclass>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <programlisting>
<codeline lineno="1"><highlight class="comment">/***************************************************************************</highlight></codeline>
<codeline lineno="2"><highlight class="comment"><sp/>*<sp/><sp/>@file<sp/><sp/><sp/><sp/><sp/><sp/><sp/>vec.h</highlight></codeline>
<codeline lineno="3"><highlight class="comment"><sp/>*<sp/><sp/>@author<sp/><sp/><sp/><sp/><sp/>Alan.W</highlight></codeline>
<codeline lineno="4"><highlight class="comment"><sp/>*<sp/><sp/>@date<sp/><sp/><sp/><sp/><sp/><sp/><sp/>02<sp/><sp/>FEB<sp/>2014</highlight></codeline>
<codeline lineno="5"><highlight class="comment"><sp/>*<sp/><sp/>@remark</highlight></codeline>
<codeline lineno="6"><highlight class="comment"><sp/>***************************************************************************/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="7"><highlight class="normal"></highlight></codeline>
<codeline lineno="8"><highlight class="normal"></highlight><highlight class="preprocessor">#ifndef<sp/>VEC_H</highlight></codeline>
<codeline lineno="9"><highlight class="preprocessor"></highlight><highlight class="preprocessor">#define<sp/>VEC_H</highlight></codeline>
<codeline lineno="10"><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="11"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;memory&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="12"><highlight class="normal"></highlight></codeline>
<codeline lineno="16"><highlight class="keyword">template</highlight><highlight class="normal">&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>T&gt;</highlight></codeline>
<codeline lineno="17" refid="class_vec" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal"><ref refid="class_vec" kindref="compound">Vec</ref></highlight></codeline>
<codeline lineno="18"><highlight class="normal">{</highlight></codeline>
<codeline lineno="19"><highlight class="normal"></highlight><highlight class="keyword">public</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="20" refid="class_vec_1a205bf548b98a3f6a2032854091f60ef8" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="class_vec_1a205bf548b98a3f6a2032854091f60ef8" kindref="member">Vec</ref>():<ref refid="class_vec_1a9c6c23d4331daa1673337f4836a4f534" kindref="member">element</ref>(nullptr),<sp/><ref refid="class_vec_1a3a8d5ca9db6205da007dfdfaed744e60" kindref="member">first_free</ref>(nullptr),<sp/><ref refid="class_vec_1a8651bd0724e40f5dd24820e024c2e014" kindref="member">cap</ref>(nullptr){<sp/>}</highlight></codeline>
<codeline lineno="21"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="class_vec_1a205bf548b98a3f6a2032854091f60ef8" kindref="member">Vec</ref>(std::initializer_list&lt;T&gt;<sp/>l);</highlight></codeline>
<codeline lineno="22"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="class_vec_1a205bf548b98a3f6a2032854091f60ef8" kindref="member">Vec</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="class_vec" kindref="compound">Vec</ref>&amp;<sp/>v);</highlight></codeline>
<codeline lineno="23"><highlight class="normal"></highlight></codeline>
<codeline lineno="24"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="class_vec" kindref="compound">Vec</ref>&amp;<sp/><ref refid="class_vec_1a6eac55a6199de36a8afa576d356d1583" kindref="member">operator =</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="class_vec" kindref="compound">Vec</ref>&amp;<sp/>rhs);</highlight></codeline>
<codeline lineno="25"><highlight class="normal"></highlight></codeline>
<codeline lineno="26"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="class_vec_1a740e7792aa68d642e608c4d9aa9043c2" kindref="member">~Vec</ref>();</highlight></codeline>
<codeline lineno="27"><highlight class="normal"></highlight></codeline>
<codeline lineno="29"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="class_vec_1a3eca41d5ac2286fa53786b60da27c6f1" kindref="member">push_back</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>T&amp;<sp/>t);</highlight></codeline>
<codeline lineno="30"><highlight class="normal"></highlight></codeline>
<codeline lineno="31" refid="class_vec_1a8a4ebd44bae84a6138f76c93f3e7165d" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/>std::size_t<sp/><ref refid="class_vec_1a8a4ebd44bae84a6138f76c93f3e7165d" kindref="member">size</ref>()</highlight><highlight class="keyword"><sp/>const<sp/><sp/><sp/><sp/></highlight><highlight class="normal">{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="class_vec_1a3a8d5ca9db6205da007dfdfaed744e60" kindref="member">first_free</ref><sp/>-<sp/><ref refid="class_vec_1a9c6c23d4331daa1673337f4836a4f534" kindref="member">element</ref>;<sp/>}</highlight></codeline>
<codeline lineno="32" refid="class_vec_1a1724258120555faeeac0476f9a7c011b" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/>std::size_t<sp/><ref refid="class_vec_1a1724258120555faeeac0476f9a7c011b" kindref="member">capacity</ref>()</highlight><highlight class="keyword">const<sp/></highlight><highlight class="normal">{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="class_vec_1a8651bd0724e40f5dd24820e024c2e014" kindref="member">cap</ref><sp/>-<sp/><ref refid="class_vec_1a9c6c23d4331daa1673337f4836a4f534" kindref="member">element</ref>;<sp/>}</highlight></codeline>
<codeline lineno="33"><highlight class="normal"></highlight></codeline>
<codeline lineno="34" refid="class_vec_1ac67d373fa026439d2df28902ffd681f1" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/>T*<sp/><ref refid="class_vec_1ac67d373fa026439d2df28902ffd681f1" kindref="member">begin</ref>()</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="class_vec_1a9c6c23d4331daa1673337f4836a4f534" kindref="member">element</ref>;<sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="35" refid="class_vec_1ab129e71489f030cce720d2c088c0440b" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/>T*<sp/><ref refid="class_vec_1ab129e71489f030cce720d2c088c0440b" kindref="member">end</ref>()</highlight><highlight class="keyword"><sp/><sp/><sp/>const<sp/></highlight><highlight class="normal">{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="class_vec_1a3a8d5ca9db6205da007dfdfaed744e60" kindref="member">first_free</ref>;<sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="36"><highlight class="normal"></highlight></codeline>
<codeline lineno="37"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="class_vec_1a234b1b894959c986bbf551e4879e853c" kindref="member">reserve</ref>(std::size_t<sp/>n);</highlight></codeline>
<codeline lineno="38"><highlight class="normal"></highlight></codeline>
<codeline lineno="39"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="class_vec_1a590d1d66fb1fbda3d656bdc50ebad63a" kindref="member">resize</ref>(std::size_t<sp/>n);</highlight></codeline>
<codeline lineno="40"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="class_vec_1a590d1d66fb1fbda3d656bdc50ebad63a" kindref="member">resize</ref>(std::size_t<sp/>n,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>T&amp;<sp/>t);</highlight></codeline>
<codeline lineno="41"><highlight class="normal"></highlight></codeline>
<codeline lineno="42"><highlight class="normal"></highlight><highlight class="keyword">private</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="44" refid="class_vec_1a9c6c23d4331daa1673337f4836a4f534" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/>T*<sp/><ref refid="class_vec_1a9c6c23d4331daa1673337f4836a4f534" kindref="member">element</ref>;</highlight></codeline>
<codeline lineno="45" refid="class_vec_1a3a8d5ca9db6205da007dfdfaed744e60" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/>T*<sp/><ref refid="class_vec_1a3a8d5ca9db6205da007dfdfaed744e60" kindref="member">first_free</ref>;</highlight></codeline>
<codeline lineno="46" refid="class_vec_1a8651bd0724e40f5dd24820e024c2e014" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/>T*<sp/><ref refid="class_vec_1a8651bd0724e40f5dd24820e024c2e014" kindref="member">cap</ref>;</highlight></codeline>
<codeline lineno="47"><highlight class="normal"></highlight></codeline>
<codeline lineno="48" refid="class_vec_1a5c11e966359cd8692e8a3ea92239469e" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/>std::allocator&lt;T&gt;<sp/><ref refid="class_vec_1a5c11e966359cd8692e8a3ea92239469e" kindref="member">alloc</ref>;</highlight></codeline>
<codeline lineno="49"><highlight class="normal"></highlight></codeline>
<codeline lineno="51"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="class_vec_1a519ef9cff69b99ed2e944d0462eab451" kindref="member">reallocate</ref>();</highlight></codeline>
<codeline lineno="52" refid="class_vec_1af1f8251cbc9a16975c4a32221b7c7ddc" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="class_vec_1af1f8251cbc9a16975c4a32221b7c7ddc" kindref="member">chk_n_alloc</ref>()<sp/><sp/>{<sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(<ref refid="class_vec_1a8a4ebd44bae84a6138f76c93f3e7165d" kindref="member">size</ref>()==<ref refid="class_vec_1a1724258120555faeeac0476f9a7c011b" kindref="member">capacity</ref>())<sp/><ref refid="class_vec_1a519ef9cff69b99ed2e944d0462eab451" kindref="member">reallocate</ref>();}</highlight></codeline>
<codeline lineno="53"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="class_vec_1a280adca83032b79f1cfb2d854fec40ba" kindref="member">free</ref>();</highlight></codeline>
<codeline lineno="54"><highlight class="normal"></highlight></codeline>
<codeline lineno="55"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="class_vec_1a376720a1d11842b75c780779f786a2b5" kindref="member">wy_alloc_n_move</ref>(std::size_t<sp/>n);</highlight></codeline>
<codeline lineno="56"><highlight class="normal"></highlight></codeline>
<codeline lineno="57"><highlight class="normal"><sp/><sp/><sp/><sp/>std::pair&lt;T*,<sp/>T*&gt;<sp/><ref refid="class_vec_1a11cb72ab9351bce7b33282d9929c684d" kindref="member">alloc_n_copy</ref>(T*<sp/><ref refid="src3_8cpp_1aafe80d64508a05a94be4d07b648244d0" kindref="member">b</ref>,<sp/>T*<sp/>e);</highlight></codeline>
<codeline lineno="58"><highlight class="normal">};</highlight></codeline>
<codeline lineno="59"><highlight class="normal"></highlight></codeline>
<codeline lineno="60"><highlight class="normal"></highlight></codeline>
<codeline lineno="62"><highlight class="keyword">template</highlight><highlight class="normal">&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>T&gt;</highlight></codeline>
<codeline lineno="63" refid="class_vec_1a90bf23efb6803d9169953dc4d1b56279" refkind="member"><highlight class="normal"><ref refid="class_vec_1a205bf548b98a3f6a2032854091f60ef8" kindref="member">Vec&lt;T&gt;::Vec</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="class_vec" kindref="compound">Vec</ref><sp/>&amp;v)</highlight></codeline>
<codeline lineno="64"><highlight class="normal">{</highlight></codeline>
<codeline lineno="69"><highlight class="normal"><sp/><sp/><sp/><sp/>std::pair&lt;T*,T*&gt;<sp/>newData<sp/>=<sp/>alloc_n_copy(v.<ref refid="class_vec_1ac67d373fa026439d2df28902ffd681f1" kindref="member">begin</ref>(),<sp/>v.<ref refid="class_vec_1ab129e71489f030cce720d2c088c0440b" kindref="member">end</ref>());</highlight></codeline>
<codeline lineno="70"><highlight class="normal"></highlight></codeline>
<codeline lineno="71"><highlight class="normal"><sp/><sp/><sp/><sp/>element<sp/>=<sp/>newData.first;</highlight></codeline>
<codeline lineno="72"><highlight class="normal"><sp/><sp/><sp/><sp/>first_free<sp/>=<sp/>cap<sp/>=<sp/>newData.second;</highlight></codeline>
<codeline lineno="73"><highlight class="normal">}</highlight></codeline>
<codeline lineno="74"><highlight class="normal"></highlight></codeline>
<codeline lineno="75"><highlight class="normal"></highlight></codeline>
<codeline lineno="77"><highlight class="keyword">template</highlight><highlight class="normal">&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>T&gt;</highlight></codeline>
<codeline lineno="78" refid="class_vec_1aba2eb81747a48ac2c28b4141bba13519" refkind="member"><highlight class="normal"><ref refid="class_vec_1a205bf548b98a3f6a2032854091f60ef8" kindref="member">Vec&lt;T&gt;::Vec</ref>(std::initializer_list&lt;T&gt;<sp/>l)</highlight></codeline>
<codeline lineno="79"><highlight class="normal">{</highlight></codeline>
<codeline lineno="81"><highlight class="normal"><sp/><sp/><sp/><sp/>T*<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>newData<sp/>=<sp/>alloc.allocate(l.size());</highlight></codeline>
<codeline lineno="82"><highlight class="normal"></highlight></codeline>
<codeline lineno="84"><highlight class="normal"><sp/><sp/><sp/><sp/>T*<sp/>p<sp/>=<sp/>newData;</highlight></codeline>
<codeline lineno="85"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal">(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>&amp;t<sp/>:<sp/>l)</highlight></codeline>
<codeline lineno="86"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>alloc.construct(p++,<sp/>t);</highlight></codeline>
<codeline lineno="87"><highlight class="normal"></highlight></codeline>
<codeline lineno="89"><highlight class="normal"><sp/><sp/><sp/><sp/>element<sp/>=<sp/>newData;</highlight></codeline>
<codeline lineno="90"><highlight class="normal"><sp/><sp/><sp/><sp/>first_free<sp/>=<sp/>cap<sp/>=<sp/>element<sp/>+<sp/>l.size();</highlight></codeline>
<codeline lineno="91"><highlight class="normal">}</highlight></codeline>
<codeline lineno="92"><highlight class="normal"></highlight></codeline>
<codeline lineno="93"><highlight class="normal"></highlight></codeline>
<codeline lineno="95"><highlight class="keyword">template</highlight><highlight class="normal">&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>T&gt;</highlight></codeline>
<codeline lineno="96" refid="class_vec_1a6eac55a6199de36a8afa576d356d1583" refkind="member"><highlight class="normal"><ref refid="class_vec" kindref="compound">Vec&lt;T&gt;</ref>&amp;<sp/><ref refid="class_vec_1a6eac55a6199de36a8afa576d356d1583" kindref="member">Vec&lt;T&gt;::operator =</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="class_vec" kindref="compound">Vec</ref>&amp;<sp/>rhs)</highlight></codeline>
<codeline lineno="97"><highlight class="normal">{</highlight></codeline>
<codeline lineno="99"><highlight class="normal"><sp/><sp/><sp/><sp/>std::pair&lt;T*,T*&gt;<sp/>newData<sp/>=<sp/>alloc_n_copy(rhs.<ref refid="class_vec_1ac67d373fa026439d2df28902ffd681f1" kindref="member">begin</ref>(),<sp/>rhs.<ref refid="class_vec_1ab129e71489f030cce720d2c088c0440b" kindref="member">end</ref>());</highlight></codeline>
<codeline lineno="100"><highlight class="normal"></highlight></codeline>
<codeline lineno="102"><highlight class="normal"><sp/><sp/><sp/><sp/>free();</highlight></codeline>
<codeline lineno="103"><highlight class="normal"></highlight></codeline>
<codeline lineno="105"><highlight class="normal"><sp/><sp/><sp/><sp/>element<sp/>=<sp/>newData.first;</highlight></codeline>
<codeline lineno="106"><highlight class="normal"><sp/><sp/><sp/><sp/>first_free<sp/>=<sp/>cap<sp/>=<sp/>newData.second;</highlight></codeline>
<codeline lineno="107"><highlight class="normal"></highlight></codeline>
<codeline lineno="108"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>*</highlight><highlight class="keyword">this</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="109"><highlight class="normal">}</highlight></codeline>
<codeline lineno="110"><highlight class="normal"></highlight></codeline>
<codeline lineno="111"><highlight class="normal"></highlight></codeline>
<codeline lineno="113"><highlight class="keyword">template</highlight><highlight class="normal">&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>T&gt;</highlight></codeline>
<codeline lineno="114" refid="class_vec_1a740e7792aa68d642e608c4d9aa9043c2" refkind="member"><highlight class="normal"><ref refid="class_vec_1a740e7792aa68d642e608c4d9aa9043c2" kindref="member">Vec&lt;T&gt;::~Vec</ref>()</highlight></codeline>
<codeline lineno="115"><highlight class="normal">{</highlight></codeline>
<codeline lineno="116"><highlight class="normal"><sp/><sp/><sp/><sp/>free();</highlight></codeline>
<codeline lineno="117"><highlight class="normal">}</highlight></codeline>
<codeline lineno="118"><highlight class="normal"></highlight></codeline>
<codeline lineno="119"><highlight class="normal"></highlight></codeline>
<codeline lineno="120"><highlight class="normal"></highlight></codeline>
<codeline lineno="125"><highlight class="keyword">template</highlight><highlight class="normal">&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>T&gt;</highlight></codeline>
<codeline lineno="126" refid="class_vec_1a3eca41d5ac2286fa53786b60da27c6f1" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="class_vec_1a3eca41d5ac2286fa53786b60da27c6f1" kindref="member">Vec&lt;T&gt;::push_back</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>T<sp/>&amp;t)</highlight></codeline>
<codeline lineno="127"><highlight class="normal">{</highlight></codeline>
<codeline lineno="128"><highlight class="normal"><sp/><sp/><sp/><sp/>chk_n_alloc();</highlight></codeline>
<codeline lineno="129"><highlight class="normal"><sp/><sp/><sp/><sp/>alloc.construct(first_free++,<sp/>t);</highlight></codeline>
<codeline lineno="130"><highlight class="normal">}</highlight></codeline>
<codeline lineno="131"><highlight class="normal"></highlight></codeline>
<codeline lineno="132"><highlight class="normal"></highlight></codeline>
<codeline lineno="133"><highlight class="normal"></highlight></codeline>
<codeline lineno="138"><highlight class="keyword">template</highlight><highlight class="normal">&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>T&gt;</highlight></codeline>
<codeline lineno="139" refid="class_vec_1a234b1b894959c986bbf551e4879e853c" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="class_vec_1a234b1b894959c986bbf551e4879e853c" kindref="member">Vec&lt;T&gt;::reserve</ref>(std::size_t<sp/>n)</highlight></codeline>
<codeline lineno="140"><highlight class="normal">{</highlight></codeline>
<codeline lineno="142"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(n<sp/>&lt;=<sp/>capacity())<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="143"><highlight class="normal"></highlight></codeline>
<codeline lineno="145"><highlight class="normal"><sp/><sp/><sp/><sp/>wy_alloc_n_move(n);</highlight></codeline>
<codeline lineno="146"><highlight class="normal">}</highlight></codeline>
<codeline lineno="147"><highlight class="normal"></highlight></codeline>
<codeline lineno="148"><highlight class="normal"></highlight></codeline>
<codeline lineno="158"><highlight class="keyword">template</highlight><highlight class="normal">&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>T&gt;</highlight></codeline>
<codeline lineno="159" refid="class_vec_1a590d1d66fb1fbda3d656bdc50ebad63a" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="class_vec_1a590d1d66fb1fbda3d656bdc50ebad63a" kindref="member">Vec&lt;T&gt;::resize</ref>(std::size_t<sp/>n)</highlight></codeline>
<codeline lineno="160"><highlight class="normal">{</highlight></codeline>
<codeline lineno="161"><highlight class="normal"><sp/><sp/><sp/><sp/>resize(n,<sp/>T());</highlight></codeline>
<codeline lineno="162"><highlight class="normal">}</highlight></codeline>
<codeline lineno="163"><highlight class="normal"></highlight></codeline>
<codeline lineno="164"><highlight class="normal"></highlight></codeline>
<codeline lineno="165"><highlight class="normal"></highlight></codeline>
<codeline lineno="177"><highlight class="keyword">template</highlight><highlight class="normal">&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>T&gt;</highlight></codeline>
<codeline lineno="178" refid="class_vec_1ab93b743eb4b662b188ccea663a7af36b" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="class_vec_1a590d1d66fb1fbda3d656bdc50ebad63a" kindref="member">Vec&lt;T&gt;::resize</ref>(std::size_t<sp/>n,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>T<sp/>&amp;t)</highlight></codeline>
<codeline lineno="179"><highlight class="normal">{</highlight></codeline>
<codeline lineno="180"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(n<sp/>&lt;<sp/>size())</highlight></codeline>
<codeline lineno="181"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="183"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal">(</highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>p<sp/>=<sp/>element<sp/>+<sp/>n;<sp/>p<sp/>!=<sp/>first_free;<sp/><sp/><sp/>)</highlight></codeline>
<codeline lineno="184"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>alloc.destroy(p++);</highlight></codeline>
<codeline lineno="186"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>first_free<sp/>=<sp/>element<sp/>+<sp/>n;</highlight></codeline>
<codeline lineno="187"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="188"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(n<sp/>&gt;<sp/>size())</highlight></codeline>
<codeline lineno="189"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="190"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>i<sp/>=<sp/>size();<sp/>i<sp/>!=<sp/>n;<sp/>++i)</highlight></codeline>
<codeline lineno="191"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>push_back(t);</highlight></codeline>
<codeline lineno="192"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="193"><highlight class="normal">}</highlight></codeline>
<codeline lineno="194"><highlight class="normal"></highlight></codeline>
<codeline lineno="195"><highlight class="normal"></highlight></codeline>
<codeline lineno="202"><highlight class="keyword">template</highlight><highlight class="normal">&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>T&gt;</highlight></codeline>
<codeline lineno="203"><highlight class="normal">std::pair&lt;T*,T*&gt;</highlight></codeline>
<codeline lineno="204" refid="class_vec_1a11cb72ab9351bce7b33282d9929c684d" refkind="member"><highlight class="normal"><ref refid="class_vec_1a11cb72ab9351bce7b33282d9929c684d" kindref="member">Vec&lt;T&gt;::alloc_n_copy</ref>(T<sp/>*<ref refid="src3_8cpp_1aafe80d64508a05a94be4d07b648244d0" kindref="member">b</ref>,<sp/>T<sp/>*e)</highlight></codeline>
<codeline lineno="205"><highlight class="normal">{</highlight></codeline>
<codeline lineno="207"><highlight class="normal"><sp/><sp/><sp/><sp/>T*<sp/>data<sp/>=<sp/>alloc.allocate(e-b);</highlight></codeline>
<codeline lineno="208"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>{<sp/>data,<sp/>std::uninitialized_copy(b,<sp/>e,<sp/>data)};</highlight></codeline>
<codeline lineno="213"><highlight class="normal">}</highlight></codeline>
<codeline lineno="214"><highlight class="normal"></highlight></codeline>
<codeline lineno="215"><highlight class="normal"></highlight></codeline>
<codeline lineno="219"><highlight class="keyword">template</highlight><highlight class="normal">&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>T&gt;</highlight></codeline>
<codeline lineno="220" refid="class_vec_1a280adca83032b79f1cfb2d854fec40ba" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="class_vec_1a280adca83032b79f1cfb2d854fec40ba" kindref="member">Vec&lt;T&gt;::free</ref>()</highlight></codeline>
<codeline lineno="221"><highlight class="normal">{</highlight></codeline>
<codeline lineno="223"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(element)</highlight></codeline>
<codeline lineno="224"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="226"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal">(</highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>p<sp/>=<sp/>first_free;<sp/>p<sp/>!=<sp/>element;<sp/><sp/><sp/><sp/>)</highlight></codeline>
<codeline lineno="227"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>alloc.destroy(--p);</highlight></codeline>
<codeline lineno="228"><highlight class="normal"></highlight></codeline>
<codeline lineno="229"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>alloc.deallocate(element,capacity());</highlight></codeline>
<codeline lineno="230"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="231"><highlight class="normal">}</highlight></codeline>
<codeline lineno="232"><highlight class="normal"></highlight></codeline>
<codeline lineno="233"><highlight class="normal"></highlight></codeline>
<codeline lineno="240"><highlight class="keyword">template</highlight><highlight class="normal">&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>T&gt;</highlight></codeline>
<codeline lineno="241" refid="class_vec_1a376720a1d11842b75c780779f786a2b5" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="class_vec_1a376720a1d11842b75c780779f786a2b5" kindref="member">Vec&lt;T&gt;::wy_alloc_n_move</ref>(std::size_t<sp/>n)</highlight></codeline>
<codeline lineno="242"><highlight class="normal">{</highlight></codeline>
<codeline lineno="244"><highlight class="normal"><sp/><sp/><sp/><sp/>std::size_t<sp/>newCapacity<sp/>=<sp/>n;</highlight></codeline>
<codeline lineno="245"><highlight class="normal"><sp/><sp/><sp/><sp/>T*<sp/>newData<sp/>=<sp/>alloc.allocate(newCapacity);</highlight></codeline>
<codeline lineno="246"><highlight class="normal"></highlight></codeline>
<codeline lineno="248"><highlight class="normal"><sp/><sp/><sp/><sp/>T*<sp/>dest<sp/>=<sp/>newData;</highlight></codeline>
<codeline lineno="249"><highlight class="normal"><sp/><sp/><sp/><sp/>T*<sp/>old<sp/><sp/>=<sp/>element;</highlight></codeline>
<codeline lineno="250"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal">(std::size_t<sp/>i<sp/>=<sp/>0;<sp/>i<sp/>!=<sp/>size();<sp/>++i)</highlight></codeline>
<codeline lineno="251"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>alloc.construct(dest++,<sp/>std::move(*old++));</highlight></codeline>
<codeline lineno="252"><highlight class="normal"></highlight></codeline>
<codeline lineno="253"><highlight class="normal"><sp/><sp/><sp/><sp/>free();</highlight></codeline>
<codeline lineno="254"><highlight class="normal"></highlight></codeline>
<codeline lineno="256"><highlight class="normal"><sp/><sp/><sp/><sp/>element<sp/><sp/><sp/><sp/><sp/>=<sp/><sp/><sp/>newData;</highlight></codeline>
<codeline lineno="257"><highlight class="normal"><sp/><sp/><sp/><sp/>first_free<sp/><sp/>=<sp/><sp/><sp/>dest;</highlight></codeline>
<codeline lineno="258"><highlight class="normal"><sp/><sp/><sp/><sp/>cap<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>=<sp/><sp/><sp/>element<sp/>+<sp/>newCapacity;</highlight></codeline>
<codeline lineno="259"><highlight class="normal">}</highlight></codeline>
<codeline lineno="260"><highlight class="normal"></highlight></codeline>
<codeline lineno="261"><highlight class="normal"></highlight></codeline>
<codeline lineno="266"><highlight class="keyword">template</highlight><highlight class="normal">&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>T&gt;</highlight></codeline>
<codeline lineno="267" refid="class_vec_1a519ef9cff69b99ed2e944d0462eab451" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="class_vec_1a519ef9cff69b99ed2e944d0462eab451" kindref="member">Vec&lt;T&gt;::reallocate</ref>()</highlight></codeline>
<codeline lineno="268"><highlight class="normal">{</highlight></codeline>
<codeline lineno="270"><highlight class="normal"><sp/><sp/><sp/><sp/>std::size_t<sp/>newCapacity<sp/>=<sp/>size()<sp/>?<sp/>2<sp/>*<sp/>size()<sp/>:<sp/>1;</highlight></codeline>
<codeline lineno="271"><highlight class="normal"></highlight></codeline>
<codeline lineno="273"><highlight class="normal"><sp/><sp/><sp/><sp/>wy_alloc_n_move(newCapacity);</highlight></codeline>
<codeline lineno="274"><highlight class="normal">}</highlight></codeline>
<codeline lineno="275"><highlight class="normal"></highlight></codeline>
<codeline lineno="276"><highlight class="normal"></highlight></codeline>
<codeline lineno="277"><highlight class="normal"></highlight></codeline>
<codeline lineno="278"><highlight class="normal"></highlight><highlight class="preprocessor">#endif<sp/>//<sp/>VEC_H</highlight></codeline>
    </programlisting>
    <location file="C:/workspace/vs_wspace/Cpp Primer 5th exercises/16_template/vec.h"/>
  </compounddef>
</doxygen>
